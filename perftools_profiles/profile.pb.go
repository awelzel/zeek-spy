// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profile.proto

package perftools_profiles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Profile struct {
	// A description of the samples associated with each Sample.value.
	// For a cpu profile this might be:
	//   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
	// For a heap profile, this might be:
	//   [["allocations","count"], ["space","bytes"]],
	// If one of the values represents the number of events represented
	// by the sample, by convention it should be at index 0 and use
	// sample_type.unit == "count".
	SampleType []*ValueType `protobuf:"bytes,1,rep,name=sample_type,json=sampleType,proto3" json:"sample_type,omitempty"`
	// The set of samples recorded in this profile.
	Sample []*Sample `protobuf:"bytes,2,rep,name=sample,proto3" json:"sample,omitempty"`
	// Mapping from address ranges to the image/binary/library mapped
	// into that address range.  mapping[0] will be the main binary.
	Mapping []*Mapping `protobuf:"bytes,3,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// Useful program location
	Location []*Location `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	// Functions referenced by locations
	Function []*Function `protobuf:"bytes,5,rep,name=function,proto3" json:"function,omitempty"`
	// A common table for strings referenced by various messages.
	// string_table[0] must always be "".
	StringTable []string `protobuf:"bytes,6,rep,name=string_table,json=stringTable,proto3" json:"string_table,omitempty"`
	// frames with Function.function_name fully matching the following
	// regexp will be dropped from the samples, along with their successors.
	DropFrames int64 `protobuf:"varint,7,opt,name=drop_frames,json=dropFrames,proto3" json:"drop_frames,omitempty"`
	// frames with Function.function_name fully matching the following
	// regexp will be kept, even if it matches drop_functions.
	KeepFrames int64 `protobuf:"varint,8,opt,name=keep_frames,json=keepFrames,proto3" json:"keep_frames,omitempty"`
	// Time of collection (UTC) represented as nanoseconds past the epoch.
	TimeNanos int64 `protobuf:"varint,9,opt,name=time_nanos,json=timeNanos,proto3" json:"time_nanos,omitempty"`
	// Duration of the profile, if a duration makes sense.
	DurationNanos int64 `protobuf:"varint,10,opt,name=duration_nanos,json=durationNanos,proto3" json:"duration_nanos,omitempty"`
	// The kind of events between sampled ocurrences.
	// e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
	PeriodType *ValueType `protobuf:"bytes,11,opt,name=period_type,json=periodType,proto3" json:"period_type,omitempty"`
	// The number of events between sampled occurrences.
	Period int64 `protobuf:"varint,12,opt,name=period,proto3" json:"period,omitempty"`
	// Freeform text associated to the profile.
	Comment []int64 `protobuf:"varint,13,rep,packed,name=comment,proto3" json:"comment,omitempty"`
	// Index into the string table of the type of the preferred sample
	// value. If unset, clients should default to the last sample value.
	DefaultSampleType    int64    `protobuf:"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3" json:"default_sample_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (dst *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(dst, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetSampleType() []*ValueType {
	if m != nil {
		return m.SampleType
	}
	return nil
}

func (m *Profile) GetSample() []*Sample {
	if m != nil {
		return m.Sample
	}
	return nil
}

func (m *Profile) GetMapping() []*Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (m *Profile) GetLocation() []*Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Profile) GetFunction() []*Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *Profile) GetStringTable() []string {
	if m != nil {
		return m.StringTable
	}
	return nil
}

func (m *Profile) GetDropFrames() int64 {
	if m != nil {
		return m.DropFrames
	}
	return 0
}

func (m *Profile) GetKeepFrames() int64 {
	if m != nil {
		return m.KeepFrames
	}
	return 0
}

func (m *Profile) GetTimeNanos() int64 {
	if m != nil {
		return m.TimeNanos
	}
	return 0
}

func (m *Profile) GetDurationNanos() int64 {
	if m != nil {
		return m.DurationNanos
	}
	return 0
}

func (m *Profile) GetPeriodType() *ValueType {
	if m != nil {
		return m.PeriodType
	}
	return nil
}

func (m *Profile) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *Profile) GetComment() []int64 {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *Profile) GetDefaultSampleType() int64 {
	if m != nil {
		return m.DefaultSampleType
	}
	return 0
}

// ValueType describes the semantics and measurement units of a value.
type ValueType struct {
	Type                 int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Unit                 int64    `protobuf:"varint,2,opt,name=unit,proto3" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValueType) Reset()         { *m = ValueType{} }
func (m *ValueType) String() string { return proto.CompactTextString(m) }
func (*ValueType) ProtoMessage()    {}
func (*ValueType) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{1}
}
func (m *ValueType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueType.Unmarshal(m, b)
}
func (m *ValueType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueType.Marshal(b, m, deterministic)
}
func (dst *ValueType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueType.Merge(dst, src)
}
func (m *ValueType) XXX_Size() int {
	return xxx_messageInfo_ValueType.Size(m)
}
func (m *ValueType) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueType.DiscardUnknown(m)
}

var xxx_messageInfo_ValueType proto.InternalMessageInfo

func (m *ValueType) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ValueType) GetUnit() int64 {
	if m != nil {
		return m.Unit
	}
	return 0
}

// Each Sample records values encountered in some program
// context. The program context is typically a stack trace, perhaps
// augmented with auxiliary information like the thread-id, some
// indicator of a higher level request being handled etc.
type Sample struct {
	// The ids recorded here correspond to a Profile.location.id.
	// The leaf is at location_id[0].
	LocationId []uint64 `protobuf:"varint,1,rep,packed,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// The type and unit of each value is defined by the corresponding
	// entry in Profile.sample_type. All samples must have the same
	// number of values, the same as the length of Profile.sample_type.
	// When aggregating multiple samples into a single sample, the
	// result has a list of values that is the elemntwise sum of the
	// lists of the originals.
	Value []int64 `protobuf:"varint,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	// label includes additional context for this sample. It can include
	// things like a thread id, allocation size, etc
	Label                []*Label `protobuf:"bytes,3,rep,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{2}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (dst *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(dst, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetLocationId() []uint64 {
	if m != nil {
		return m.LocationId
	}
	return nil
}

func (m *Sample) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Sample) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

type Label struct {
	Key int64 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	// At most one of the following must be present
	Str int64 `protobuf:"varint,2,opt,name=str,proto3" json:"str,omitempty"`
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	// Should only be present when num is present.
	// Specifies the units of num.
	// Use arbitrary string (for example, "requests") as a custom count unit.
	// If no unit is specified, consumer may apply heuristic to deduce the unit.
	// Consumers may also  interpret units like "bytes" and "kilobytes" as memory
	// units and units like "seconds" and "nanoseconds" as time units,
	// and apply appropriate unit conversions to these.
	NumUnit              int64    `protobuf:"varint,4,opt,name=num_unit,json=numUnit,proto3" json:"num_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{3}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Label.Unmarshal(m, b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Label.Marshal(b, m, deterministic)
}
func (dst *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(dst, src)
}
func (m *Label) XXX_Size() int {
	return xxx_messageInfo_Label.Size(m)
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Label) GetStr() int64 {
	if m != nil {
		return m.Str
	}
	return 0
}

func (m *Label) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Label) GetNumUnit() int64 {
	if m != nil {
		return m.NumUnit
	}
	return 0
}

type Mapping struct {
	// Unique nonzero id for the mapping.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address at which the binary (or DLL) is loaded into memory.
	MemoryStart uint64 `protobuf:"varint,2,opt,name=memory_start,json=memoryStart,proto3" json:"memory_start,omitempty"`
	// The limit of the address range occupied by this mapping.
	MemoryLimit uint64 `protobuf:"varint,3,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	// Offset in the binary that corresponds to the first mapped address.
	FileOffset uint64 `protobuf:"varint,4,opt,name=file_offset,json=fileOffset,proto3" json:"file_offset,omitempty"`
	// The object this entry is loaded from.  This can be a filename on
	// disk for the main binary and shared libraries, or virtual
	// abstractions like "[vdso]".
	Filename int64 `protobuf:"varint,5,opt,name=filename,proto3" json:"filename,omitempty"`
	// A string that uniquely identifies a particular program version
	// with high probability. E.g., for binaries generated by GNU tools,
	// it could be the contents of the .note.gnu.build-id field.
	BuildId int64 `protobuf:"varint,6,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The following fields indicate the resolution of symbolic info.
	HasFunctions         bool     `protobuf:"varint,7,opt,name=has_functions,json=hasFunctions,proto3" json:"has_functions,omitempty"`
	HasFilenames         bool     `protobuf:"varint,8,opt,name=has_filenames,json=hasFilenames,proto3" json:"has_filenames,omitempty"`
	HasLineNumbers       bool     `protobuf:"varint,9,opt,name=has_line_numbers,json=hasLineNumbers,proto3" json:"has_line_numbers,omitempty"`
	HasInlineFrames      bool     `protobuf:"varint,10,opt,name=has_inline_frames,json=hasInlineFrames,proto3" json:"has_inline_frames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mapping) Reset()         { *m = Mapping{} }
func (m *Mapping) String() string { return proto.CompactTextString(m) }
func (*Mapping) ProtoMessage()    {}
func (*Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{4}
}
func (m *Mapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mapping.Unmarshal(m, b)
}
func (m *Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mapping.Marshal(b, m, deterministic)
}
func (dst *Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mapping.Merge(dst, src)
}
func (m *Mapping) XXX_Size() int {
	return xxx_messageInfo_Mapping.Size(m)
}
func (m *Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_Mapping proto.InternalMessageInfo

func (m *Mapping) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mapping) GetMemoryStart() uint64 {
	if m != nil {
		return m.MemoryStart
	}
	return 0
}

func (m *Mapping) GetMemoryLimit() uint64 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *Mapping) GetFileOffset() uint64 {
	if m != nil {
		return m.FileOffset
	}
	return 0
}

func (m *Mapping) GetFilename() int64 {
	if m != nil {
		return m.Filename
	}
	return 0
}

func (m *Mapping) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *Mapping) GetHasFunctions() bool {
	if m != nil {
		return m.HasFunctions
	}
	return false
}

func (m *Mapping) GetHasFilenames() bool {
	if m != nil {
		return m.HasFilenames
	}
	return false
}

func (m *Mapping) GetHasLineNumbers() bool {
	if m != nil {
		return m.HasLineNumbers
	}
	return false
}

func (m *Mapping) GetHasInlineFrames() bool {
	if m != nil {
		return m.HasInlineFrames
	}
	return false
}

// Describes function and line table debug information.
type Location struct {
	// Unique nonzero id for the location.  A profile could use
	// instruction addresses or any integer sequence as ids.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the corresponding profile.Mapping for this location.
	// It can be unset if the mapping is unknown or not applicable for
	// this profile type.
	MappingId uint64 `protobuf:"varint,2,opt,name=mapping_id,json=mappingId,proto3" json:"mapping_id,omitempty"`
	// The instruction address for this location, if available.  It
	// should be within [Mapping.memory_start...Mapping.memory_limit]
	// for the corresponding mapping. A non-leaf address may be in the
	// middle of a call instruction. It is up to display tools to find
	// the beginning of the instruction if necessary.
	Address uint64 `protobuf:"varint,3,opt,name=address,proto3" json:"address,omitempty"`
	// Multiple line indicates this location has inlined functions,
	// where the last entry represents the caller into which the
	// preceding entries were inlined.
	//
	// E.g., if memcpy() is inlined into printf:
	//    line[0].function_name == "memcpy"
	//    line[1].function_name == "printf"
	Line []*Line `protobuf:"bytes,4,rep,name=line,proto3" json:"line,omitempty"`
	// Provides an indication that multiple symbols map to this location's
	// address, for example due to identical code folding by the linker. In that
	// case the line information above represents one of the multiple
	// symbols. This field must be recomputed when the symbolization state of the
	// profile changes.
	IsFolded             bool     `protobuf:"varint,5,opt,name=is_folded,json=isFolded,proto3" json:"is_folded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{5}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Location) GetMappingId() uint64 {
	if m != nil {
		return m.MappingId
	}
	return 0
}

func (m *Location) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *Location) GetLine() []*Line {
	if m != nil {
		return m.Line
	}
	return nil
}

func (m *Location) GetIsFolded() bool {
	if m != nil {
		return m.IsFolded
	}
	return false
}

type Line struct {
	// The id of the corresponding profile.Function for this line.
	FunctionId uint64 `protobuf:"varint,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Line number in source code.
	Line                 int64    `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Line) Reset()         { *m = Line{} }
func (m *Line) String() string { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()    {}
func (*Line) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{6}
}
func (m *Line) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Line.Unmarshal(m, b)
}
func (m *Line) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Line.Marshal(b, m, deterministic)
}
func (dst *Line) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Line.Merge(dst, src)
}
func (m *Line) XXX_Size() int {
	return xxx_messageInfo_Line.Size(m)
}
func (m *Line) XXX_DiscardUnknown() {
	xxx_messageInfo_Line.DiscardUnknown(m)
}

var xxx_messageInfo_Line proto.InternalMessageInfo

func (m *Line) GetFunctionId() uint64 {
	if m != nil {
		return m.FunctionId
	}
	return 0
}

func (m *Line) GetLine() int64 {
	if m != nil {
		return m.Line
	}
	return 0
}

type Function struct {
	// Unique nonzero id for the function.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the function, in human-readable form if available.
	Name int64 `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the function, as identified by the system.
	// For instance, it can be a C++ mangled name.
	SystemName int64 `protobuf:"varint,3,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	// Source file containing the function.
	Filename int64 `protobuf:"varint,4,opt,name=filename,proto3" json:"filename,omitempty"`
	// Line number in source file.
	StartLine            int64    `protobuf:"varint,5,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Function) Reset()         { *m = Function{} }
func (m *Function) String() string { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()    {}
func (*Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_profile_44c3f5c2cb09a36f, []int{7}
}
func (m *Function) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Function.Unmarshal(m, b)
}
func (m *Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Function.Marshal(b, m, deterministic)
}
func (dst *Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Function.Merge(dst, src)
}
func (m *Function) XXX_Size() int {
	return xxx_messageInfo_Function.Size(m)
}
func (m *Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Function proto.InternalMessageInfo

func (m *Function) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Function) GetName() int64 {
	if m != nil {
		return m.Name
	}
	return 0
}

func (m *Function) GetSystemName() int64 {
	if m != nil {
		return m.SystemName
	}
	return 0
}

func (m *Function) GetFilename() int64 {
	if m != nil {
		return m.Filename
	}
	return 0
}

func (m *Function) GetStartLine() int64 {
	if m != nil {
		return m.StartLine
	}
	return 0
}

func init() {
	proto.RegisterType((*Profile)(nil), "perftools.profiles.Profile")
	proto.RegisterType((*ValueType)(nil), "perftools.profiles.ValueType")
	proto.RegisterType((*Sample)(nil), "perftools.profiles.Sample")
	proto.RegisterType((*Label)(nil), "perftools.profiles.Label")
	proto.RegisterType((*Mapping)(nil), "perftools.profiles.Mapping")
	proto.RegisterType((*Location)(nil), "perftools.profiles.Location")
	proto.RegisterType((*Line)(nil), "perftools.profiles.Line")
	proto.RegisterType((*Function)(nil), "perftools.profiles.Function")
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor_profile_44c3f5c2cb09a36f) }

var fileDescriptor_profile_44c3f5c2cb09a36f = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x51, 0x8b, 0xe3, 0x36,
	0x10, 0xc7, 0x49, 0xec, 0x24, 0xce, 0x78, 0x77, 0x7b, 0xa7, 0x96, 0xe2, 0xbb, 0x6b, 0xb8, 0x34,
	0xa5, 0x10, 0x4a, 0x9b, 0xc2, 0x1d, 0x85, 0x42, 0xe1, 0x1e, 0xee, 0x61, 0x21, 0xb0, 0xdd, 0x1e,
	0xda, 0x6b, 0xe9, 0x9b, 0x51, 0x62, 0x39, 0x11, 0x67, 0x49, 0xc6, 0xb2, 0x0b, 0xf9, 0x0a, 0xfd,
	0x10, 0xfd, 0x5a, 0xfd, 0x24, 0x7d, 0x2f, 0x33, 0x92, 0xcd, 0xd2, 0xa4, 0x70, 0x6f, 0x9a, 0xbf,
	0x7f, 0x63, 0x69, 0x66, 0xfe, 0xb2, 0xe1, 0xba, 0x6e, 0x6c, 0xa9, 0x2a, 0xb9, 0xa9, 0x1b, 0xdb,
	0x5a, 0xc6, 0x6a, 0xd9, 0x94, 0xad, 0xb5, 0x95, 0xdb, 0x84, 0x07, 0x6e, 0xf5, 0x4f, 0x0c, 0xb3,
	0x77, 0x3e, 0x60, 0x6f, 0x20, 0x75, 0x42, 0xd7, 0x95, 0xcc, 0xdb, 0x53, 0x2d, 0xb3, 0xd1, 0x32,
	0x5a, 0xa7, 0xaf, 0x16, 0x9b, 0xf3, 0xac, 0xcd, 0x6f, 0xa2, 0xea, 0xe4, 0xfb, 0x53, 0x2d, 0x39,
	0xf8, 0x0c, 0x5c, 0xb3, 0x57, 0x30, 0xf5, 0x51, 0x36, 0xa6, 0xd4, 0xe7, 0x97, 0x52, 0x1f, 0x88,
	0xe0, 0x81, 0x64, 0x3f, 0xc0, 0x4c, 0x8b, 0xba, 0x56, 0xe6, 0x90, 0x45, 0x94, 0xf4, 0xe2, 0x52,
	0xd2, 0xcf, 0x1e, 0xe1, 0x3d, 0xcb, 0x7e, 0x84, 0xa4, 0xb2, 0x7b, 0xd1, 0x2a, 0x6b, 0xb2, 0x98,
	0xf2, 0xbe, 0xb8, 0x94, 0x77, 0x17, 0x18, 0x3e, 0xd0, 0x98, 0x59, 0x76, 0x66, 0x4f, 0x99, 0x93,
	0xff, 0xcf, 0xbc, 0x0d, 0x0c, 0x1f, 0x68, 0xf6, 0x25, 0x5c, 0xb9, 0xb6, 0x51, 0xe6, 0x90, 0xb7,
	0x62, 0x57, 0xc9, 0x6c, 0xba, 0x8c, 0xd6, 0x73, 0x9e, 0x7a, 0xed, 0x3d, 0x4a, 0xec, 0x25, 0xa4,
	0x45, 0x63, 0xeb, 0xbc, 0x6c, 0x84, 0x96, 0x2e, 0x9b, 0x2d, 0x47, 0xeb, 0x88, 0x03, 0x4a, 0xb7,
	0xa4, 0x20, 0xf0, 0x41, 0xca, 0x01, 0x48, 0x3c, 0x80, 0x52, 0x00, 0x16, 0x00, 0xad, 0xd2, 0x32,
	0x37, 0xc2, 0x58, 0x97, 0xcd, 0xe9, 0xf9, 0x1c, 0x95, 0x7b, 0x14, 0xd8, 0xd7, 0x70, 0x53, 0x74,
	0x0d, 0x55, 0x12, 0x10, 0x20, 0xe4, 0xba, 0x57, 0x3d, 0xf6, 0x06, 0xd2, 0x5a, 0x36, 0xca, 0x16,
	0x7e, 0x92, 0xe9, 0x72, 0xf4, 0x11, 0x93, 0xf4, 0x19, 0x34, 0xc9, 0xcf, 0x61, 0xea, 0xa3, 0xec,
	0x8a, 0x5e, 0x1f, 0x22, 0x96, 0xc1, 0x6c, 0x6f, 0xb5, 0x96, 0xa6, 0xcd, 0xae, 0x97, 0xd1, 0x3a,
	0xe2, 0x7d, 0xc8, 0x36, 0xf0, 0x69, 0x21, 0x4b, 0xd1, 0x55, 0x6d, 0xfe, 0xd8, 0x43, 0x37, 0x94,
	0xfe, 0x34, 0x3c, 0x7a, 0x18, 0xbc, 0xb2, 0x7a, 0x0d, 0xf3, 0x61, 0x6b, 0xc6, 0x20, 0x0e, 0x8e,
	0x43, 0x9a, 0xd6, 0xa8, 0x75, 0x46, 0xb5, 0xd9, 0xd8, 0x6b, 0xb8, 0x5e, 0xd5, 0x30, 0xf5, 0xaf,
	0xc0, 0x3e, 0xf6, 0x13, 0xcd, 0x55, 0x41, 0x56, 0x8d, 0x39, 0xf4, 0xd2, 0xb6, 0x60, 0x9f, 0xc1,
	0xe4, 0x0f, 0x7c, 0x3f, 0x59, 0x31, 0xe2, 0x3e, 0x60, 0xdf, 0xc3, 0xa4, 0x12, 0x3b, 0x59, 0x05,
	0xaf, 0x3d, 0xbb, 0xe8, 0x19, 0x04, 0xb8, 0xe7, 0x56, 0xbf, 0xc3, 0x84, 0x62, 0xf6, 0x04, 0xa2,
	0x0f, 0xf2, 0x14, 0x4e, 0x88, 0x4b, 0x54, 0x5c, 0xdb, 0x84, 0xf3, 0xe1, 0x12, 0x15, 0xd3, 0xe9,
	0x2c, 0xf2, 0x8a, 0xe9, 0x34, 0x7b, 0x06, 0x89, 0xe9, 0x74, 0x4e, 0x85, 0xc4, 0x24, 0xcf, 0x4c,
	0xa7, 0x7f, 0xc5, 0x5a, 0xfe, 0x1e, 0xc3, 0x2c, 0xd8, 0x9a, 0xdd, 0xc0, 0x98, 0x8a, 0x18, 0xad,
	0x63, 0x3e, 0x56, 0x05, 0x3a, 0x4d, 0x4b, 0x6d, 0x9b, 0x53, 0xee, 0x5a, 0xd1, 0xf8, 0x1e, 0xc4,
	0x3c, 0xf5, 0xda, 0x03, 0x4a, 0x8f, 0x90, 0x4a, 0x69, 0xd5, 0xd2, 0xa6, 0x03, 0x72, 0x87, 0x12,
	0xf6, 0x08, 0x2b, 0xca, 0x6d, 0x59, 0x3a, 0xe9, 0xf7, 0x8f, 0x39, 0xa0, 0xf4, 0x0b, 0x29, 0xec,
	0x39, 0x24, 0x18, 0x19, 0xa1, 0x65, 0x36, 0xa1, 0xd3, 0x0d, 0x31, 0x9e, 0x7c, 0xd7, 0xa9, 0xaa,
	0xc0, 0xee, 0x4e, 0xfd, 0xc9, 0x29, 0xde, 0x16, 0xec, 0x2b, 0xb8, 0x3e, 0x0a, 0x97, 0xf7, 0xf7,
	0xc2, 0xdb, 0x3c, 0xe1, 0x57, 0x47, 0xe1, 0xfa, 0x5b, 0xe3, 0x06, 0x28, 0xbc, 0xcf, 0x5b, 0x3d,
	0x40, 0xbd, 0xc6, 0xd6, 0xf0, 0x04, 0xa1, 0x4a, 0x19, 0x99, 0x9b, 0x4e, 0xef, 0x64, 0xe3, 0x2d,
	0x9f, 0xf0, 0x9b, 0xa3, 0x70, 0x77, 0xca, 0xc8, 0x7b, 0xaf, 0xb2, 0x6f, 0xe0, 0x29, 0x92, 0xca,
	0x10, 0x1b, 0x6e, 0x0f, 0x10, 0xfa, 0xc9, 0x51, 0xb8, 0x2d, 0xe9, 0xfe, 0x0a, 0xad, 0xfe, 0x1a,
	0x41, 0xd2, 0x5f, 0xfc, 0xb3, 0xd6, 0x2e, 0x00, 0xc2, 0x37, 0x04, 0x2b, 0xf3, 0x8d, 0x9d, 0x07,
	0x65, 0x4b, 0x06, 0x17, 0x45, 0xd1, 0x48, 0xe7, 0x42, 0x47, 0xfb, 0x90, 0x7d, 0x0b, 0x31, 0xee,
	0x11, 0xbe, 0x36, 0xd9, 0x45, 0xe7, 0x28, 0x23, 0x39, 0x51, 0xec, 0x05, 0xcc, 0x95, 0xcb, 0x4b,
	0x5b, 0x15, 0xb2, 0xa0, 0xde, 0x26, 0x3c, 0x51, 0xee, 0x96, 0xe2, 0xd5, 0x4f, 0x10, 0x23, 0x4a,
	0x03, 0x0a, 0x0d, 0xcb, 0x87, 0x43, 0x42, 0x2f, 0x6d, 0x0b, 0xbc, 0x03, 0xb4, 0x67, 0xb8, 0x03,
	0xb8, 0x5e, 0xfd, 0x39, 0x82, 0xa4, 0x6f, 0xf3, 0x59, 0x75, 0x0c, 0x62, 0x9a, 0x66, 0x48, 0xa0,
	0x49, 0xbe, 0x84, 0xd4, 0x9d, 0x5c, 0x2b, 0x75, 0x4e, 0x8f, 0xbc, 0x3b, 0xc1, 0x4b, 0xf7, 0x08,
	0x3c, 0xb6, 0x41, 0xfc, 0x1f, 0x1b, 0x2c, 0x00, 0xc8, 0x82, 0x34, 0xa3, 0x60, 0x92, 0x39, 0x29,
	0x58, 0xc1, 0xdb, 0xef, 0x60, 0xb1, 0xb7, 0x7a, 0x73, 0xb0, 0xf6, 0x80, 0x7f, 0x99, 0xb3, 0x96,
	0xbc, 0xbd, 0x0a, 0xff, 0x96, 0x77, 0xf8, 0x03, 0xda, 0x4d, 0xe9, 0x3f, 0xf4, 0xfa, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xeb, 0xe6, 0x47, 0x56, 0x98, 0x06, 0x00, 0x00,
}
